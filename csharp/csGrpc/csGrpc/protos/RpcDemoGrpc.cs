// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_demo.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace RpcDemo {
  public static partial class CoordsComm
  {
    static readonly string __ServiceName = "RpcDemo.CoordsComm";

    static readonly grpc::Marshaller<global::RpcDemo.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcDemo.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RpcDemo.PointStamped> __Marshaller_PointStamped = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcDemo.PointStamped.Parser.ParseFrom);

    static readonly grpc::Method<global::RpcDemo.Empty, global::RpcDemo.PointStamped> __Method_GetCoords = new grpc::Method<global::RpcDemo.Empty, global::RpcDemo.PointStamped>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCoords",
        __Marshaller_Empty,
        __Marshaller_PointStamped);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::RpcDemo.RpcDemoReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CoordsComm</summary>
    public abstract partial class CoordsCommBase
    {
      public virtual global::System.Threading.Tasks.Task<global::RpcDemo.PointStamped> GetCoords(global::RpcDemo.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CoordsComm</summary>
    public partial class CoordsCommClient : grpc::ClientBase<CoordsCommClient>
    {
      /// <summary>Creates a new client for CoordsComm</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CoordsCommClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CoordsComm that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CoordsCommClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CoordsCommClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CoordsCommClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::RpcDemo.PointStamped GetCoords(global::RpcDemo.Empty request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCoords(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcDemo.PointStamped GetCoords(global::RpcDemo.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCoords, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RpcDemo.PointStamped> GetCoordsAsync(global::RpcDemo.Empty request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCoordsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RpcDemo.PointStamped> GetCoordsAsync(global::RpcDemo.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCoords, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CoordsCommClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CoordsCommClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CoordsCommBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetCoords, serviceImpl.GetCoords).Build();
    }

  }
}
#endregion
