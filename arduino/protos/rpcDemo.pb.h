/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_RPCDEMO_RPCDEMO_PB_H_INCLUDED
#define PB_RPCDEMO_RPCDEMO_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _RpcDemo_PointStamped_Point {
    float x;
    float y;
    float z;
} RpcDemo_PointStamped_Point;

typedef struct _RpcDemo_PointStamped_Header {
    uint32_t seq;
    uint64_t stamp;
    pb_callback_t frame_id;
} RpcDemo_PointStamped_Header;

typedef struct _RpcDemo_PointStamped {
    bool has_header;
    RpcDemo_PointStamped_Header header;
    bool has_point;
    RpcDemo_PointStamped_Point point;
} RpcDemo_PointStamped;

typedef struct _RpcDemo_Empty {
    char dummy_field;
} RpcDemo_Empty;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define RpcDemo_PointStamped_init_default        {false, RpcDemo_PointStamped_Header_init_default, false, RpcDemo_PointStamped_Point_init_default}
#define RpcDemo_PointStamped_Point_init_default  {0, 0, 0}
#define RpcDemo_PointStamped_Header_init_default {0, 0, {{NULL}, NULL}}
#define RpcDemo_Empty_init_default               {0}
#define RpcDemo_PointStamped_init_zero           {false, RpcDemo_PointStamped_Header_init_zero, false, RpcDemo_PointStamped_Point_init_zero}
#define RpcDemo_PointStamped_Point_init_zero     {0, 0, 0}
#define RpcDemo_PointStamped_Header_init_zero    {0, 0, {{NULL}, NULL}}
#define RpcDemo_Empty_init_zero                  {0}

/* Field tags (for use in manual encoding/decoding) */
#define RpcDemo_PointStamped_Point_x_tag         1
#define RpcDemo_PointStamped_Point_y_tag         2
#define RpcDemo_PointStamped_Point_z_tag         3
#define RpcDemo_PointStamped_Header_seq_tag      1
#define RpcDemo_PointStamped_Header_stamp_tag    2
#define RpcDemo_PointStamped_Header_frame_id_tag 3
#define RpcDemo_PointStamped_header_tag          1
#define RpcDemo_PointStamped_point_tag           2

/* Struct field encoding specification for nanopb */
#define RpcDemo_PointStamped_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  header,            1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  point,             2)
#define RpcDemo_PointStamped_CALLBACK NULL
#define RpcDemo_PointStamped_DEFAULT NULL
#define RpcDemo_PointStamped_header_MSGTYPE RpcDemo_PointStamped_Header
#define RpcDemo_PointStamped_point_MSGTYPE RpcDemo_PointStamped_Point

#define RpcDemo_PointStamped_Point_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    x,                 1) \
X(a, STATIC,   SINGULAR, FLOAT,    y,                 2) \
X(a, STATIC,   SINGULAR, FLOAT,    z,                 3)
#define RpcDemo_PointStamped_Point_CALLBACK NULL
#define RpcDemo_PointStamped_Point_DEFAULT NULL

#define RpcDemo_PointStamped_Header_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   seq,               1) \
X(a, STATIC,   SINGULAR, UINT64,   stamp,             2) \
X(a, CALLBACK, SINGULAR, STRING,   frame_id,          3)
#define RpcDemo_PointStamped_Header_CALLBACK pb_default_field_callback
#define RpcDemo_PointStamped_Header_DEFAULT NULL

#define RpcDemo_Empty_FIELDLIST(X, a) \

#define RpcDemo_Empty_CALLBACK NULL
#define RpcDemo_Empty_DEFAULT NULL

extern const pb_msgdesc_t RpcDemo_PointStamped_msg;
extern const pb_msgdesc_t RpcDemo_PointStamped_Point_msg;
extern const pb_msgdesc_t RpcDemo_PointStamped_Header_msg;
extern const pb_msgdesc_t RpcDemo_Empty_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define RpcDemo_PointStamped_fields &RpcDemo_PointStamped_msg
#define RpcDemo_PointStamped_Point_fields &RpcDemo_PointStamped_Point_msg
#define RpcDemo_PointStamped_Header_fields &RpcDemo_PointStamped_Header_msg
#define RpcDemo_Empty_fields &RpcDemo_Empty_msg

/* Maximum encoded size of messages (where known) */
/* RpcDemo_PointStamped_size depends on runtime parameters */
/* RpcDemo_PointStamped_Header_size depends on runtime parameters */
#define RpcDemo_Empty_size                       0
#define RpcDemo_PointStamped_Point_size          15

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
