// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: rpcDemo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoordsComm_GetCoords_FullMethodName = "/RpcDemo.CoordsComm/GetCoords"
)

// CoordsCommClient is the client API for CoordsComm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordsCommClient interface {
	GetCoords(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PointStamped, error)
}

type coordsCommClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordsCommClient(cc grpc.ClientConnInterface) CoordsCommClient {
	return &coordsCommClient{cc}
}

func (c *coordsCommClient) GetCoords(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PointStamped, error) {
	out := new(PointStamped)
	err := c.cc.Invoke(ctx, CoordsComm_GetCoords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordsCommServer is the server API for CoordsComm service.
// All implementations must embed UnimplementedCoordsCommServer
// for forward compatibility
type CoordsCommServer interface {
	GetCoords(context.Context, *Empty) (*PointStamped, error)
	mustEmbedUnimplementedCoordsCommServer()
}

// UnimplementedCoordsCommServer must be embedded to have forward compatible implementations.
type UnimplementedCoordsCommServer struct {
}

func (UnimplementedCoordsCommServer) GetCoords(context.Context, *Empty) (*PointStamped, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoords not implemented")
}
func (UnimplementedCoordsCommServer) mustEmbedUnimplementedCoordsCommServer() {}

// UnsafeCoordsCommServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordsCommServer will
// result in compilation errors.
type UnsafeCoordsCommServer interface {
	mustEmbedUnimplementedCoordsCommServer()
}

func RegisterCoordsCommServer(s grpc.ServiceRegistrar, srv CoordsCommServer) {
	s.RegisterService(&CoordsComm_ServiceDesc, srv)
}

func _CoordsComm_GetCoords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordsCommServer).GetCoords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoordsComm_GetCoords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordsCommServer).GetCoords(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CoordsComm_ServiceDesc is the grpc.ServiceDesc for CoordsComm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoordsComm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RpcDemo.CoordsComm",
	HandlerType: (*CoordsCommServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCoords",
			Handler:    _CoordsComm_GetCoords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcDemo.proto",
}
